package nagyhazi;

import java.util.HexFormat;

public class Decrypt {

    public String base64(String input) {
        String binary = "";
        String output = "";
        for (int i = 0; i < input.length(); i++) {
            binary += String.format("%6s", Integer.toBinaryString(input.charAt(i))).replace(' ', '0');
        }
        for (int i = 0; i < binary.length(); i += 8) {
            String chunk = binary.substring(i, i + 8);
            int decimal = Integer.parseInt(chunk, 2);
            char character = (char) decimal;
            output += character;
        }
        return input;
    }

    public String rot13(String input) {
        String output = "";
        for (int i = 0; i < input.length(); i++) {
            char character = input.charAt(i);
            if (character >= 'a' && character <= 'm') {
                output += (char) (character + 13);
            } else if (character >= 'n' && character <= 'z') {
                output += (char) (character - 13);
            } else {
                output += character;
            }
        }
        return output;
    }

    public String xor(String input, String key) {
        String output = "";
        for (int i = 0; i < input.length(); i++) {
            output += (char) (input.charAt(i) ^ key.charAt(i % key.length()));
        }
        return output;
    }

    public String caesar(String input, int key) {
        String output = "";
        for (int i = 0; i < input.length(); i++) {
            char character = input.charAt(i);
            if (character >= 'a' && character <= 'z' || character >= 'A' && character <= 'Z') {
                output += (char) (character - key);
            } else {
                output += (char) (character - key + 26);
            }
        }
        return output;
    }

    public String vigenere(String input, String key) {
        String output = "";
        for (int i = 0; i < input.length(); i++) {
            char character = input.charAt(i);
            char keyChar = key.charAt(i % key.length());
            if (character >= 'a' && character <= 'z' || character >= 'A' && character <= 'Z') {
                output += (char) (character - keyChar + 'a');
            } else {
                output += (char) (character - keyChar + 'A');
            }
        }
        return output;
    }

    public String morse(String input) {
        String output = "";
        String[] morse = input.split(" ");
        for (String morseCode : morse) {
            for (morseCodes morseCode1 : morseCodes.values()) {
                if (morseCode.equals(morseCode1.toString())) {
                    output += morseCode1.name();
                }
            }
        }
        return output;
    }

    public String hex(String input) {
        String output = "";
        for (int i = 0; i < input.length(); i += 2) {
            output += String.valueOf((char) HexFormat.fromHexDigit(Integer.parseInt(input.substring(i, i + 2), 16)));
        }
        return output;
    }

    public String binary(String input) {
        String output = "";
        for (int i = 0; i < input.length(); i += 8) {
            output += String.valueOf(Byte.parseByte(input.substring(i, i + 8)));

        }
        return output;
    }

    public String atbash(String input) {
        String output = "";
        for (int i = 0; i < input.length(); i++) {
            char character = input.charAt(i);
            int decimal = (int) character - 'a';
            output += (char) ('z' - decimal);
        }
        return output;
    }

    public String bacon(String input) {
        String output = "";
        for (int i = 0; i < input.length(); i += 5) {
            String binary = "";
            String chunk = input.substring(i, i + 5);
            for (int j = 0; j < chunk.length(); j++) {
                if (chunk.charAt(j) == 'a') {
                    binary += "0";
                } else {
                    binary += "1";
                }
            }
            output += (char) Integer.parseInt(binary, 2) + 'a';
        }
        return output;
    }
}
